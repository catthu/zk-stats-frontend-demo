"schema_name","function_name","function_definition"
"public","get_datasets","CREATE OR REPLACE FUNCTION public.get_datasets()\n RETURNS TABLE(id uuid, title text, description text, subtitle text, owner_id uuid, schema json, rows bigint, columns bigint, private boolean, unlisted boolean, created_at timestamp with time zone, updated_at date, username text)\n LANGUAGE sql\nAS $function$\n  select \n    d.id,\n    d.title,\n    d.description,\n    d.subtitle,\n    d.owner_id,\n    d.schema,\n    d.rows,\n    d.columns,\n    d.private,\n    d.unlisted,\n    d.created_at,\n    d.updated_at,\n    u.username\n  from datasets d\n  left join users u on d.owner_id = u.user_id\n  order by d.created_at desc;\n$function$\n"
"public","get_dataset","CREATE OR REPLACE FUNCTION public.get_dataset(dataset_id uuid)\n RETURNS TABLE(id uuid, title text, description text, created_at timestamp with time zone, updated_at timestamp with time zone, owner_id uuid, schema jsonb, rows integer, columns integer, subtitle text, username text)\n LANGUAGE sql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\n  select \n    d.id,\n    d.title,\n    d.description,\n    d.created_at,\n    d.updated_at,\n    d.owner_id,\n    d.schema,\n    d.rows,\n    d.columns,\n    d.subtitle,\n    u.username\n  from datasets d\n  left join users u on d.owner_id = u.user_id\n  where d.id = dataset_id;\n$function$\n"
"public","get_computation","CREATE OR REPLACE FUNCTION public.get_computation(dataset_id uuid, computation_id uuid)\n RETURNS TABLE(id uuid, title text, description text, code text, dataset_id uuid, user_id uuid, username text, is_accepted boolean, is_completed boolean, result text, result_approved boolean, created_at timestamp with time zone)\n LANGUAGE sql\nAS $function$\n  select \n    c.id,\n    c.title,\n    c.description,\n    c.code,\n    c.dataset_id,\n    c.user_id,\n    u.username,\n    c.is_accepted,\n    c.is_completed,\n    c.result,\n    c.result_approved,\n    c.created_at\n  from computations c\n  join users u on u.user_id = c.user_id\n  where c.dataset_id = $1 and c.id = $2;\n$function$\n"
"public","get_request","CREATE OR REPLACE FUNCTION public.get_request(id uuid)\n RETURNS TABLE(id uuid, title text, description text, code text, dataset_id uuid, user_id uuid, username text, is_accepted boolean, is_completed boolean, result text, result_approved boolean, created_at timestamp with time zone, updated_at timestamp with time zone)\n LANGUAGE sql\nAS $function$\n  select \n    c.id,\n    c.title,\n    c.description,\n    c.code,\n    c.dataset_id,\n    c.user_id,\n    u.username,\n    c.is_accepted,\n    c.is_completed,\n    c.result,\n    c.result_approved,\n    c.created_at,\n    c.updated_at    -- Added this field\n  from computations c\n  join users u on u.user_id = c.user_id\n  where c.id = $1;\n$function$\n"
"public","get_requests","CREATE OR REPLACE FUNCTION public.get_requests(dataset_id uuid, user_id uuid DEFAULT NULL::uuid)\n RETURNS TABLE(id uuid, title text, description text, code text, dataset_id uuid, user_id uuid, username text, is_accepted boolean, is_completed boolean, result text, result_approved boolean, created_at timestamp with time zone, updated_at timestamp with time zone)\n LANGUAGE sql\nAS $function$\n  select \n    c.id,\n    c.title,\n    c.description,\n    c.code,\n    c.dataset_id,\n    c.user_id,\n    u.username,\n    c.is_accepted,\n    c.is_completed,\n    c.result,\n    c.result_approved,\n    c.created_at,\n    c.updated_at\n  from computations c\n  LEFT JOIN users u on u.user_id = c.user_id\n  where c.dataset_id = $1\n    and (($2 is null) or (c.user_id = $2));\n$function$\n"